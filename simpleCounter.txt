--Easy Counter
--by @TyrantNomad
--based on Power and Toughness by Tipsy Hobbit (steamid: 13465982)

moduleVersion = "1.05"
pID = "_MTG_Simplified_Counter"
autoActivateModule = true
isRegistered = false

function onload(saved_data)
    processSavedData(saved_data)
    createModuleChipButtons()
end

function onSave()
    local data_to_save = {autoActivateModule}
    saved_data = JSON.encode(data_to_save)
    return saved_data
end

function processSavedData(saved_data)
    if saved_data ~= nil and saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        autoActivateModule = loaded_data.autoActivateModule
    end
end

function createModuleChipButtons()
    enc = Global.getVar('Encoder')
    if enc ~= nil then
        isRegistered = enc.call("APIpropertyExists",{propID = pID})
    else
        isRegistered = false
    end

    self.createButton({
        click_function="doNothing",
        function_owner=self,
        position={0,0.15,-0.325},
        rotation={180,0,0},

        height= 116,
        width= 780,

        color = {90/255,24/255,51/255}
    })

    self.createButton({
        label= "EASY COUNTER",
        click_function="doNothing",
        function_owner=self,
        position={0,0.15,-0.325},

        height= 0,
        width= 0,

        color = {90/255,24/255,51/255},

        font_size = 100,
        font_color = {1,156/255,196/255}
    })

    self.createButton({
        label = "AUTO "..(autoActivateModule and "ON" or "OFF"),
        tooltip = "When ON, automatically activates the module on cards with loyalty",

        click_function = "toggleAutoActivate",
        function_owner = self,

        font_color = (autoActivateModule and {1,156/255,196/255} or {64/255,19/255,37/255}),
        color = (autoActivateModule and {238/255, 25/255, 110/255} or {106/255, 29/255, 60/255}),
        hover_color = {90/255,24/255,51/255},

        position={0,0.15,0},

        width = 600,
        height = 80
    })

    self.createButton({
        label=(isRegistered and "REGISTERED" or "ADD MODULE"),
        click_function="doNothing",
        function_owner=self,
        position={0,0.15,0.35},
        height=0,
        width=0,
        font_size = 60,
    })

    self.createButton({
        click_function=(isRegistered and "doNothing" or "registerModule"),
        function_owner=self,
        position={0,0.15,0.35},
        rotation = (isRegistered and {180,0,0} or {0,0,0}),
        height=60,
        width=450,
        font_size = 60,
    })

    self.createButton({
        label = "version "..moduleVersion,
        click_function=("doNothing"),
        function_owner=self,
        position={0,-0.15,0},
        rotation = {180,180,0},
        height=60,
        width=450,
        font_size = 60,
    })
end

function clearModuleChipButtons()
    chipButtons = self.getButtons()
    for index,button in pairs(chipButtons) do
        self.removeButton(index -1)
    end
end

function refreshModuleChipButtons()
    clearModuleChipButtons()
    createModuleChipButtons()
end


function registerModule()
  enc = Global.getVar('Encoder')
  if enc ~= nil then
    if tonumber(enc.getVar("version")) < 3.18 then 
        broadcastToAll("Encoder version too old. To use this module, manually upgrade it to v3.18+ or type 'counter encoder update' to attempt a forced update")
        return
    end
    
    properties = {
    propID = pID,
    name = " Easy Counter",
    dataStruct = {genericCount=0, hasLoyalty, hasOtherCounter = false},
    funcOwner = self,
    callOnActivate = false,
    activateFunc =''
    }
    enc.call("APIregisterProperty",properties)

    refreshModuleChipButtons()
  end
end

function toggleAutoActivate()
    autoActivateModule = not autoActivateModule
    refreshModuleChipButtons()
end

function createButtons(t)
    enc = Global.getVar('Encoder')
    if enc ~= nil then
        data = enc.call("APIgetObjectData",{obj=t.object,propID=pID})
        flip = enc.call("APIgetFlip",{obj=t.object})
        scaler = {x=1,y=1,z=1}--t.object.getScale()

        tryParsing(t.object)
        
        temp = " "..data.genericCount.." "

        local verticalSize = 130
        local horizontalSize = 145
        local rimSize = 30


        local horizontalOffset = -0.81
        local flipHorizontal = data.hasLoyalty and -1 or 1
        local verticalOffset = 1.275
        --tile size is about 500 for 1 unit


        t.object.createButton({
            click_function = 'doNothing',
            function_owner = self,

            height = verticalSize + rimSize,
            width = horizontalSize + rimSize,

            color = {133/255,133/255,133/255},

            position=
            {
                flipHorizontal * ((horizontalOffset)*flip*scaler.x),
                0.28*flip*scaler.z,
                (verticalOffset)*scaler.y
            },

            rotation={0,0,-90-90*flip}
        })


        t.object.createButton({
            label=temp,
            tooltip = "Right-click to subtract",

            click_function='receiveSingleClick',
            function_owner=self,

            position=
            {
                flipHorizontal * ((horizontalOffset)*flip*scaler.x),
                0.35*flip*scaler.z,
                (verticalOffset)*scaler.y
            },

            height= verticalSize,
            width= horizontalSize,
            color = {66/255,66/255,66/255},

            font_size=fSize,
            font_color = {1,1,1},

            rotation={0,0,90-90*flip}
        })
    end
end


--Editor Functions
function tryParsing(object)
    enc = Global.getVar('Encoder')
    if enc ~= nil then
        data = enc.call("APIgetObjectData",{obj=object,propID=pID})
        
        --if hasloyalty is nil then parsing hasn't been attempted
        --this should do 3 checks, in order of possible success
        --planeswalkers are the most common at 217 hits, so they're the first check
        --then keywords, at about 200 hits
        --then charge (97 hits) and the top recurring name counters (~60 hits total)

        if data.hasLoyalty == nil then
            local loyaltyValue = getLoyaltyFromCard(object.getDescription())

            if loyaltyValue ~= nil then
                data.genericCount = loyaltyValue
                data.hasLoyalty = true
            else
                data.hasLoyalty = false

                data.hasOtherCounter = hasKeywordOrNamedCounter(object)
            end

            enc.call("APIsetObjectData",{obj=object,propID=pID,data=data})
        end

        return data.hasLoyalty or data.hasOtherCounter
    end
end

function receiveSingleClick(tar,ply,alt)
    local clickModifier = alt and -1 or 1
    processCounterDelta(tar, ply, clickModifier)
end

function processCounterDelta(tar, ply, deltaCounter)
    enc = Global.getVar('Encoder')

    if enc ~= nil then
        changeCounterCount(tar, deltaCounter)
        
        if type(ply) == "string" then
            local selection =Player[ply].getSelectedObjects()
            if selection ~= nil then
                for k,v in pairs(selection) do
                    if v ~= tar and enc.call("APIobjectExist",{obj=v}) == true then
                        changeCounterCount(v, deltaCounter)
                    end
                end
            end
        else
            enc.call("APIrebuildButtons",{obj=tar})
        end
    end
end

function changeCounterCount(tar, valueDelta)
    enc = Global.getVar('Encoder')
    if enc ~= nil then
        data = enc.call("APIgetObjectData",{obj=tar,propID=pID})
        data.genericCount = data.genericCount + valueDelta

        enc.call("APIsetObjectData",{obj=tar,propID=pID,data=data})
        enc.call("APIrebuildButtons",{obj=tar})
    end
end

function getLoyaltyFromCard(description)
    local parsedValue = string.match(description,"]%d+%[")
    local loyaltyValue
    if parsedValue ~= nil then
        loyaltyValue = string.match(parsedValue,"%d+")
    end
    return loyaltyValue
end

function hasKeywordOrNamedCounter(object)
    local keywordCounters = {"Cumulative upkeep", "Suspend", "Vanishing", "Fading", "after III"}
    description = object.getDescription()

    for index, keywordString in ipairs(keywordCounters) do
        if string.find(description, keywordString) then
                return true
        end
    end
    local namedCounterCheckParse
    namedCounterCheckParse = string.match(object.getDescription(), "[pP]ut %a+ %a+ counters? on %a+")
    if namedCounterCheckParse == nil then namedCounterCheckParse = string.match(object.getDescription(), "with %a+ %a+ counters? on %a+") end

    local cardNameFirstWord = string.match(object.getName(), "%a+")

    if namedCounterCheckParse ~= nil and (string.find(namedCounterCheckParse, " it") ~= nil or (cardNameFirstWord ~= nil and string.find(namedCounterCheckParse, " "..cardNameFirstWord)) ) ~= nil then
        --this checks if it puts counters on itself, the space is to avoid false hits for other words
        namedCounters = {"charge", "storage", "quest", "spore", "depletion", "ki", "verse"}

        for index, counterName in ipairs(namedCounters) do
            if string.find(namedCounterCheckParse, counterName) ~= nil then
                return true
            end
        end
    end
    
    return false
end

function onObjectDropped(playerColor,object)
    if autoActivateModule == false or object.tag ~= "Card" then
        return
    end

    timerId = "autoActivate"..pID.."for"..object.guid
    Timer.destroy(timerId)

    dataTable = {obj = object}
    Timer.create({
        identifier = timerId,
        function_name = "autoActivate",
        function_owner = self,
        parameters = dataTable,
        delay = 0.15
    })
end

function autoActivate(dataTable)
    object = dataTable.obj

    local enc = Global.getVar('Encoder')
    if enc ~= nil then
        if enc.call("APIpropertyExists",{propID = pID}) == false then
            return

        elseif enc.call("APIobjectExist", {obj=object}) ~= nil then
            local data = enc.call("APIgetObjectData",{obj=object,propID=pID})
            if data ~= nil and data.hasLoyalty ~= nil then return end

            --this ensures that it only auto-activates once

            if enc.call("APIcheckEnabled", {obj=object, propID = pID}) == false then
                enc.call("APItoggleProperty",{obj=object, propID = pID})
                
                if tryParsing(object) == false then
                    enc.call("APItoggleProperty",{obj=object, propID = pID})
                end

                enc.call("APIrebuildButtons",{obj=object})
                return
            end
        end
    end
end

function doNothing()
end

